
# This is a basic workflow to help you get started with Actions
name: IaC Deployment
env:
  NAME: 'devopsdemo'
  REGION: 'westeurope'
# Controls when the action will run. 
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    # inputs:
    #   env:
    #     type: string
    #     description: "Environment"
    #     default: "development"
  # push:
  #   branches: 
  #     - main
  #   paths: 
  #     - 'infra/**' 
  #     - 'runner/**'
permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  DevOps_IaC_demo:
    runs-on: ubuntu-latest
    #environment: development in case the OIDC federated was configured with Environment
    steps:
    - name: Checkout source code 
      uses: actions/checkout@v3
    - name: 'Az CLI login'
      uses: azure/login@v1
      with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    - name: deployment
      id: deploy
      uses: azure/arm-deploy@v1
      with:
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
        scope: subscription
        region: ${{ env.REGION }}
        template: ./infra/main.bicep
        parameters: name="${{ env.NAME }}" sshpublickey="${{ secrets.SSH_PUBLIC_KEY }}"
        failOnStdErr: false      
    - run: echo ${{ steps.deploy.outputs.resourcegroupname }}  
    # - name: Set AKS context
    #   id: set-context
    #   uses: azure/aks-set-context@v3
    #   with:
    #     resource-group: '${{ steps.deploy.outputs.resourcegroupname }}' 
    #     cluster-name: '${{ steps.deploy.outputs.aksresourcename }}'
    #- name: Install Runner
    #  run: |
    #      kubectl apply -f ./runner/cert-manager.yaml 
    #      kubectl create -f ./runner/actions-runner-controller.yaml 
    #      kubectl create secret generic controller-manager  -n actions-runner-system --from-literal=github_token=${{ secrets.RUNNER_TOKEN }}
    #      sleep 90
    #      kubectl apply -f ./runner/runnerdeployment.yaml 
    #      kubectl apply -f ./runner/hra-scaler.yaml
