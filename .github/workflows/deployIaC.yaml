
# This is a basic workflow to help you get started with Actions
name: IaC Deployment
env:  
  PREFIX: ypdemo
  REGION: westeurope
  ENVIRONMENT_NAME: "${{ github.ref == 'refs/heads/dev' && 'dev' || 'prod' }}"
# Controls when the action will run. 
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  push:
    branches: 
      - "**"
    paths: 
      - 'infra/**'
permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  Setup_Job:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' 
    outputs:
      output_env: ${{ steps.getvariable.outputs.fromenv }}
      guid: ${{ steps.getvariable.outputs.guid }}
    steps:
      - name: getvariable
        id: getvariable      
        run: |
          echo "fromenv=${{ env.ENVIRONMENT_NAME }}" >> $GITHUB_OUTPUT
          echo "guid=$(uuidgen)" >> $GITHUB_OUTPUT
  WhatIf:
    runs-on: ubuntu-latest
    needs: [Setup_Job]
    environment: whatif
    steps:
    - name: Checkout source code 
      uses: actions/checkout@v3
    - run: |
        echo ${{ needs.Setup_Job.outputs.output_env }}
    - name: 'Az CLI login'
      uses: azure/login@v1
      with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    - name: Run Whatif Scenario
      uses: azure/arm-deploy@v1
      with:
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
        scope: subscription
        region: ${{ env.REGION }}
        template: ./infra/${{ needs.Setup_Job.outputs.output_env }}.bicep
        parameters: name="${{ env.PREFIX }}${{ needs.Setup_Job.outputs.output_env }}" sshpublickey="${{ secrets.SSH_PUBLIC_KEY }}"
        additionalArguments: "--what-if"
  Deployment_IaC:
    runs-on: ubuntu-latest
    needs: [Setup_Job, WhatIf]
    environment: 
      name: ${{ needs.Setup_Job.outputs.output_env }}    
    outputs:
      resourcegroupname: ${{ steps.deploy.outputs.resourcegroupname }}
      aksresourcename: ${{ steps.deploy.outputs.aksresourcename }}
      acrloginserver: ${{ steps.deploy.outputs.acrloginserver }}
    steps:
    - name: Checkout source code 
      uses: actions/checkout@v3
    - name: 'Az CLI login'
      uses: azure/login@v1
      with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    - name: Bicep Deployment
      id: deploy
      uses: azure/arm-deploy@v1
      with:
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
        scope: subscription
        region: ${{ env.REGION }}
        template: ./infra/${{ needs.Setup_Job.outputs.output_env }}.bicep
        parameters: name="${{ env.PREFIX }}${{ needs.Setup_Job.outputs.output_env }}" sshpublickey="${{ secrets.PUBLIC_KEY }}"
        failOnStdErr: false
        deploymentName: ${{ needs.Setup_Job.outputs.output_env }}-${{ needs.Setup_Job.outputs.guid }}
  Install_ArgoCD:    
    runs-on: ubuntu-latest    
    needs: [Setup_Job, Deployment_IaC]        
    environment: 
      name: ${{ needs.Setup_Job.outputs.output_env }}   
      url: ${{ steps.argocd.outputs.argourl }}   
    steps:  
    - name: Checkout source code 
      uses: actions/checkout@v3
    - name: 'Az CLI login'
      uses: azure/login@v1
      with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    - name: Set AKS context
      id: set-context
      uses: azure/aks-set-context@v3
      with:
        resource-group: '${{ needs.Deployment_IaC.outputs.resourcegroupname }}' 
        cluster-name: '${{ needs.Deployment_IaC.outputs.aksresourcename }}'
    - name: Install ArgoCD on AKS
      id: argocd
      run: |
        kubectl create namespace argocd
        kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml   
        kubectl apply -n argocd -f ./argoCD/argo-server/argocd-service-loadbalancer.yaml        
        sleep 45
        kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo
        echo "argourl=https://$(kubectl get svc argocd-server-loadbalancer -nargocd  -o jsonpath='{.status.loadBalancer.ingress[0].ip}')" >> $GITHUB_OUTPUT
  Config:
    needs: [Setup_Job, Deployment_IaC]
    runs-on: ubuntu-latest
    steps:
    - name: Use config repository
      uses: actions/checkout@v3
      with:
        repository: ${{ github.repository_owner }}/argocd-apps-config
        ref: main
        token: ${{ secrets.ACTIONS_TOKEN }}
    - name: Push commit hash to IaC repository
      run: |        
        git config user.name $(git log -n 1 --pretty=format:%an)
        git config user.email $(git log -n 1 --pretty=format:%ae)
        if [[ '${{ needs.Setup_Job.outputs.output_env }}' == 'dev' ]]; then
          echo ${{ needs.Deployment_IaC.outputs.resourcegroupname }} > global/rg-dev
          echo ${{ needs.Deployment_IaC.outputs.aksresourcename }} > global/aks-dev
          echo ${{ needs.Deployment_IaC.outputs.acrloginserver }} > helm/demo-app/dynamic/acr-dev
          git commit global/rg-dev global/aks-dev helm/demo-app/dynamic/acr-dev -m "IaC deployment - dev"
        else
          echo ${{ needs.Deployment_IaC.outputs.resourcegroupname }} > global/rg-prod
          echo ${{ needs.Deployment_IaC.outputs.aksresourcename }} > global/aks-prod
          echo ${{ needs.Deployment_IaC.outputs.acrloginserver }} > helm/demo-app/dynamic/acr-prod
          git commit global/rg-prod global/aks-prod helm/demo-app/dynamic/acr-prod -m "IaC deployment - prod"
        fi
        git push origin HEAD