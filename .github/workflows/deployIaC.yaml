
# This is a basic workflow to help you get started with Actions
name: IaC Deployment
env:  
  ENVIRONMENT_NAME: "${{ github.ref == 'refs/heads/dev' && 'development' || 'production' }}"
  NAME: 'devopsdemo'
  REGION: 'westeurope'  
# Controls when the action will run. 
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  push:
     branches: 
       - dev
     paths: 
       - 'infra/**'   
  pull_request:
      types:
        - closed
      branches:
        - main
permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  DevOps_IaC_demo:
    runs-on: ubuntu-latest
    environment: ${{ env.ENVIRONMENT_NAME }}
    #environment: development in case the OIDC federated was configured with Environment
    outputs:
      resourcegroupname: ${{ steps.deploy.outputs.resourcegroupname }}
      aksresourcename: ${{ steps.deploy.outputs.aksresourcename }}
    steps:
    - name: Checkout source code 
      uses: actions/checkout@v3
    - name: 'Az CLI login'
      uses: azure/login@v1
      with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    - name: Bicep Deployment
      id: deploy
      uses: azure/arm-deploy@v1
      with:
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
        scope: subscription
        region: ${{ env.REGION }}
        template: ./infra/${{ env.ENVIRONMENT_NAME }}/main.bicep
        parameters: name="${{ env.NAME }}-${{ env.ENVIRONMENT_NAME }}" sshpublickey="${{ secrets.SSH_PUBLIC_KEY }}"
        failOnStdErr: false
  Install_ArgoCD:    
    runs-on: ubuntu-latest
    environment: ${{ env.ENVIRONMENT_NAME }}
    needs: [DevOps_IaC_demo]
    steps:  
    - name: Checkout source code 
      uses: actions/checkout@v3
    - name: 'Az CLI login'
      uses: azure/login@v1
      with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    - name: Set AKS context
      id: set-context
      uses: azure/aks-set-context@v3
      with:
        resource-group: '${{ needs.DevOps_IaC_demo.outputs.resourcegroupname }}' 
        cluster-name: '${{ needs.DevOps_IaC_demo.outputs.aksresourcename }}'
    - name: Install ArgoCD on AKS
      run: |
         kubectl create namespace argocd
         kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml   
         kubectl apply -n argocd -f ./argoCD/argo-server/argocd-service-loadbalancer.yaml
         kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo
